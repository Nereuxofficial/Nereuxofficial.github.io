<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ws2812 on Nereuxofficials Blog</title><link>https://nereuxofficial.github.io/tags/ws2812/</link><description>Recent content in ws2812 on Nereuxofficials Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 05 Mar 2022 21:31:55 +0200</lastBuildDate><atom:link href="https://nereuxofficial.github.io/tags/ws2812/index.xml" rel="self" type="application/rss+xml"/><item><title>Making a Dino Light with the ESP32 and WS2812</title><link>https://nereuxofficial.github.io/posts/esp32-ws2812-dino-light/</link><pubDate>Sat, 05 Mar 2022 21:31:55 +0200</pubDate><guid>https://nereuxofficial.github.io/posts/esp32-ws2812-dino-light/</guid><description>I found this on thingiverse and decided to make it, but with Rust and an ESP32.
This is the final result: Hardware Part I&amp;rsquo;d recommend getting WS2812 strips with less than 144 Pixels/m since it&amp;rsquo;s really painful to solder with that density, especially when you have little experience with soldering like me. For the ESP32 I&amp;rsquo;d recommend the ESP32-C, since that chip has a RISC-V chip, which has better Rust support than the Xtensa based boards.</description><content>&lt;p>I found &lt;a href="https://www.thingiverse.com/thing:5220507/">this&lt;/a> on thingiverse and
decided to make it, but with Rust and an ESP32.&lt;/p>
&lt;p>This is the final result:
&lt;img src="./images/dino_light.jpg" alt="This is the final result">&lt;/p>
&lt;h2 id="hardware-part">Hardware Part&lt;/h2>
&lt;p>I&amp;rsquo;d recommend getting WS2812 strips with less than 144 Pixels/m since it&amp;rsquo;s really
painful to solder with that density, especially when you have little experience with
soldering like me. For the ESP32 I&amp;rsquo;d recommend the ESP32-C, since that chip has a
RISC-V chip, which has better Rust support than the Xtensa based boards.&lt;/p>
&lt;p>If your microcontroller has a 5V connector we&amp;rsquo;re going to connect that to the 5V input of
the LED strip, otherwise you&amp;rsquo;ll need another way to supply the 5V. Also, just connect the GND
Pin to the GND Pin of the LEDs. As a data Pin, take a look at the Pin-out diagram of your board.
In my case the GPIO15 should do nicely, since it&amp;rsquo;s not used for internal flashing and works nicely
with SPI.&lt;/p>
&lt;h2 id="software-part">Software Part&lt;/h2>
&lt;p>THIS ENTIRE SECTION IS NOT NECESSARY ANMORE. You can now use &lt;a href="https://github.com/esp-rs/espup">espup&lt;/a>, which sets up everything needed.&lt;/p>
&lt;h3 id="setting-up-the-toolchain-and-compiler">Setting up the toolchain and compiler&lt;/h3>
&lt;p>This has been really painful for me to set up, and I hope you can avoid some frustration
by following this post.&lt;/p>
&lt;p>You can avoid nearly all of this setup by getting the ESP32-C as mentioned above.&lt;/p>
&lt;p>Download rust-build using this command:&lt;/p>
&lt;p>&lt;code>git clone https://github.com/esp-rs/rust-build&lt;/code>&lt;/p>
&lt;p>Install it via this command:&lt;/p>
&lt;p>&lt;code>cd rust-build; ./install-rust-toolchain.sh&lt;/code>&lt;/p>
&lt;p>After the script is finished, follow the instructions at the end.&lt;/p>
&lt;p>Now use &lt;code>rustup default esp&lt;/code>(except if you have the C in which case you can use Rust nightly) and
install &lt;code>cargo install cargo-espflash&lt;/code>, used for flashing, and cargo pio(which decodes the stack trace):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -fsSL https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py -o get-platformio.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 get-platformio.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cargo install cargo-pio
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compile and flash via(on Windows you will have to look up the command yourself):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cargo espflash --release /dev/ttyUSB0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If flashing with cargo espflash doesn&amp;rsquo;t work you can try pressing the &lt;code>Boot&lt;/code> Button during
the command, which always worked for me.&lt;/p>
&lt;p>We can monitor the serial output via:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cargo pio espidf monitor /dev/ttyUSB0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="code">Code&lt;/h2>
&lt;p>For the dependencies we have this in our &lt;code>Cargo.toml&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">dependencies&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># For the ESP32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">esp32&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.11.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">esp32-hal&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.3.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">xtensa-lx&lt;/span> = { &lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.4.0&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">features&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;lx6&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">xtensa-lx-rt&lt;/span> = { &lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.7.0&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">optional&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#a6e22e">features&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;lx6&amp;#34;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># For the LEDs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ws2812-spi&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.4.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">smart-leds&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0.3.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At the start of our &lt;code>main.rs&lt;/code> file we need these since we&amp;rsquo;re working with
a microcontroller and don&amp;rsquo;t have the std library for it(&lt;a href="https://github.com/ivmarkov/rust-esp32-std-demo">There is a project for the ESP32 with the std library&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#![no_std]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#![no_main]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the main function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[entry]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; &lt;span style="color:#f92672">!&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">loop&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We need the #[entry] attribute to define the entry point of the program and the &amp;ldquo;!&amp;rdquo; signals
that the function will not return and this is also why we need the never ending loop.&lt;/p>
&lt;p>Then the actual setup:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[entry]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() -&amp;gt; &lt;span style="color:#f92672">!&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> dp &lt;span style="color:#f92672">=&lt;/span> target::Peripherals::take().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> (_, dport_clock_control) &lt;span style="color:#f92672">=&lt;/span> dp.DPORT.split();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> clkcntrl &lt;span style="color:#f92672">=&lt;/span> ClockControl::new(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp.RTCCNTL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp.APB_CTRL,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dport_clock_control,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> XTAL_FREQUENCY_AUTO,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> (clkcntrl_config, _) &lt;span style="color:#f92672">=&lt;/span> clkcntrl.freeze().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> pins &lt;span style="color:#f92672">=&lt;/span> dp.GPIO.split();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> data_out &lt;span style="color:#f92672">=&lt;/span> pins.gpio15.into_push_pull_output();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We need SPI for the WS2812 library
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> spi: &lt;span style="color:#a6e22e">SPI&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>_, _, _, _&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> SPI::&lt;span style="color:#f92672">&amp;lt;&lt;/span>esp32::SPI2, _, _, _, _&lt;span style="color:#f92672">&amp;gt;&lt;/span>::new(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp.SPI2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spi::Pins {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sclk: &lt;span style="color:#a6e22e">pins&lt;/span>.gpio14,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sdo: &lt;span style="color:#a6e22e">data_out&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sdi: Some(pins.gpio25),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cs: None,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spi::config::Config {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> baudrate: &lt;span style="color:#ae81ff">3.&lt;/span>MHz().into(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bit_order: &lt;span style="color:#a6e22e">spi&lt;/span>::config::BitOrder::MSBFirst,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data_mode: &lt;span style="color:#a6e22e">spi&lt;/span>::config::MODE_0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clkcntrl_config,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> ws &lt;span style="color:#f92672">=&lt;/span> Ws2812::new(spi);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">loop&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we create some structs to control the Strip easier:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> NUM_LEDS: &lt;span style="color:#66d9ef">usize&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">23&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">LightData&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> leds: [RGB8; NUM_LEDS],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Strip&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ws: &lt;span style="color:#a6e22e">Ws2812&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>SPI&lt;span style="color:#f92672">&amp;lt;&lt;/span>SPI2, Gpio14&lt;span style="color:#f92672">&amp;lt;&lt;/span>Unknown&lt;span style="color:#f92672">&amp;gt;&lt;/span>, Gpio15&lt;span style="color:#f92672">&amp;lt;&lt;/span>Output&lt;span style="color:#f92672">&amp;lt;&lt;/span>PushPull&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>, Gpio25&lt;span style="color:#f92672">&amp;lt;&lt;/span>Unknown&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: &lt;span style="color:#a6e22e">LightData&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brightness: &lt;span style="color:#66d9ef">u8&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And some functions to manipulate the data inside:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> LightData {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">empty&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Self {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> leds: [RGB8::new(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>); NUM_LEDS],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">write_to_strip&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strip: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> Ws2812&lt;span style="color:#f92672">&amp;lt;&lt;/span>SPI&lt;span style="color:#f92672">&amp;lt;&lt;/span>SPI2, Gpio14&lt;span style="color:#f92672">&amp;lt;&lt;/span>Unknown&lt;span style="color:#f92672">&amp;gt;&lt;/span>, Gpio15&lt;span style="color:#f92672">&amp;lt;&lt;/span>Output&lt;span style="color:#f92672">&amp;lt;&lt;/span>PushPull&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>, Gpio25&lt;span style="color:#f92672">&amp;lt;&lt;/span>Unknown&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strip.write(self.leds.iter().cloned()).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_led&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, index: &lt;span style="color:#66d9ef">usize&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">RGB8&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.leds[index]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">set_color_all&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, color: &lt;span style="color:#a6e22e">RGB8&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">..&lt;/span>NUM_LEDS {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.set_color(i, color);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">set_red&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, index: &lt;span style="color:#66d9ef">usize&lt;/span>, red: &lt;span style="color:#66d9ef">u8&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.leds[index].r &lt;span style="color:#f92672">=&lt;/span> red;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">set_green&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, index: &lt;span style="color:#66d9ef">usize&lt;/span>, green: &lt;span style="color:#66d9ef">u8&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.leds[index].g &lt;span style="color:#f92672">=&lt;/span> green;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">set_blue&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, index: &lt;span style="color:#66d9ef">usize&lt;/span>, blue: &lt;span style="color:#66d9ef">u8&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.leds[index].b &lt;span style="color:#f92672">=&lt;/span> blue;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">set_color&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, led: &lt;span style="color:#66d9ef">usize&lt;/span>, color: &lt;span style="color:#a6e22e">RGB8&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.leds[led] &lt;span style="color:#f92672">=&lt;/span> color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Default &lt;span style="color:#66d9ef">for&lt;/span> LightData {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">default&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Self {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> leds: [RGB8::new(STEPS, STEPS, STEPS); NUM_LEDS],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Strip {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.data.write_to_strip(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self.ws);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">set_color&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, color: &lt;span style="color:#a6e22e">RGB8&lt;/span>, index: &lt;span style="color:#66d9ef">usize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.data.set_color(index, color);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.write();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">set_solid&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, color: &lt;span style="color:#a6e22e">RGB8&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.data.set_color_all(color);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.write();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_brightness&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.data.get_brightness();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we can put this in the main function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> strip &lt;span style="color:#f92672">=&lt;/span> Strip {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ws,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: &lt;span style="color:#a6e22e">LightData&lt;/span>::from_gradient(RGB8::new(&lt;span style="color:#ae81ff">40&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>), RGB::new(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">40&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brightness: &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strip.set_solid(RGB8::new(&lt;span style="color:#ae81ff">25&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delay(&lt;span style="color:#ae81ff">40_000_000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">..&lt;/span>NUM_LEDS {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strip.set_color(RGB8::new(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">25&lt;/span>), i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delay(&lt;span style="color:#ae81ff">40_000_000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will set the LEDs to red initially and individually turn them blue&lt;/p>
&lt;p>Lastly we need a &lt;code>#[panic_handler]&lt;/code>, this will suffice for this example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[panic_handler]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">panic&lt;/span>(info: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">PanicInfo&lt;/span>) -&amp;gt; &lt;span style="color:#f92672">!&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dprintln&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;\n\n*** {:?}&amp;#34;&lt;/span>, info);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">loop&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now we can flash it via:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cargo espflash --release /dev/ttyUSB0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can find the entire source code &lt;a href="https://github.com/esp-rs/esp32-hal/blob/master/examples/leds.rs">here&lt;/a>&lt;/p>
&lt;p>If you&amp;rsquo;ve read so far: Thanks, it means a lot to me!&lt;/p>
&lt;p>In the future we may explore how to make this controllable with Wi-fi.&lt;/p>
&lt;h2 id="thanks-to">Thanks to:&lt;/h2>
&lt;p>&lt;a href="https://github.com/MaxDroid42">A friend of mine, who helped me get started with this project, especially the hardware
part&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/esp-rs">The entire esp-rs GitHub organization for making ESP Chips Rust compatible&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/smart-leds-rs/smart-leds-samples/blob/master/microbit-v2-examples/examples/microbit_v2_ws2812_spi_blink.rs">smart-leds and WS2812-spi, especially this example&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.thingiverse.com/renevandeneertwegh/designs">René van den Eertwegh on Thingiverse for the Models&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kerkour.com/rust-on-esp32">This blog post&lt;/a>&lt;/p></content></item></channel></rss>